
FEEDBACK DA AVALIAÇÃO - Prova 1 - POO
═══════════════════════════════════════════════════════════
Estudante: StudentTwo SurnameTwo (fzampirolli3)
Data: 2025-09-15 08:49:42
Nota Final (HIGHEST de 3 tentativas): 95.00 pontos
Total de Chamadas à API: 3

Observação: A 'Nota Final' é o resultado do critério 'HIGHEST' aplicado a 3 tentativas. O feedback
detalhado e as notas por questão abaixo referem-se especificamente à tentativa com a MAIOR nota.

## Análise da Questão 1: Padrão Singleton

O código submetido pelo aluno implementa o padrão Singleton, que é um padrão de projeto de software
que garante que uma classe tenha apenas uma instância e fornece um ponto de acesso global a essa
instância.

### 1. INSTÂNCIA ÚNICA

✅ CORRETO: O código tem um mecanismo para garantir que apenas uma instância da classe
`CentralNotificacoes` seja criada. Isso é feito através do uso de um atributo estático `_instancia`
que é inicializado como `None` e é verificado antes de criar uma nova instância.

### 2. MÉTODO DE ACESSO

✅ CORRETO: O código tem um método estático `__new__` que retorna a instância única da classe
`CentralNotificacoes`. Esse método é chamado quando uma nova instância da classe é solicitada.

### 3. CONSTRUTOR PRIVADO/PROTEGIDO

✅ CORRETO: O código não tem um construtor público explícito, e o método `__new__` é usado para criar
a instância, o que é uma forma de garantir que a instância seja criada de forma controlada.

### 4. EXECUÇÃO CORRETA

✅ CORRETO: O código executa sem erros de sintaxe e a lógica parece coerente.

### Nota

Considerando os critérios acima, o código submetido pelo aluno atende a todos os requisitos do
padrão Singleton. No entanto, é importante notar que o código pode ser melhorado em termos de
organização e legibilidade.

QUESTAO_Q1: 25/25 - O código implementa corretamente o padrão Singleton.

---

## Análise da Questão 2: Herança, Composição e Exceções

O código submetido pelo aluno implementa conceitos de herança, composição e tratamento de exceções.

### 1. CLASSE ABSTRATA BASE

✅ CORRETO: A classe `Curso` é definida como abstrata e contém atributos básicos como `nome` e
`duracao`.

### 2. MÉTODO ABSTRATO

✅ CORRETO: A classe `Curso` tem um método abstrato `calcular_carga_horaria` que é sobrescrito pelas
subclasses `Graduacao` e `PosGraduacao`.

### 3. HERANÇA CORRETA

✅ CORRETO: As classes `Graduacao` e `PosGraduacao` herdam da classe `Curso` e implementam os métodos
abstratos obrigatórios.

### 4. CLASSE AUXILIAR

✅ CORRETO: A classe `Disciplina` é definida como uma classe auxiliar que representa um conceito
coerente.

### 5. COMPOSIÇÃO/AGREGAÇÃO

✅ CORRETO: A classe `Curso` tem uma lista de disciplinas, e os métodos `adicionar_disciplina`
permitem adicionar disciplinas à lista.

### 6. TRATAMENTO DE EXCEÇÕES

✅ CORRETO: O construtor da classe `Curso` lança uma exceção `ValueError` se a duração for inválida.

### 7. EXECUÇÃO CORRETA

✅ CORRETO: O código executa sem erros de sintaxe e a lógica parece coerente.

### Nota

Considerando os critérios acima, o código submetido pelo aluno atende a todos os requisitos. No
entanto, é importante notar que o código pode ser melhorado em termos de organização e legibilidade.
Além disso, o método `adicionar_disciplina` da classe `PosGraduacao` está faltando o parâmetro
`self`.

QUESTAO_Q2: 70/75 - O código implementa corretamente conceitos de herança, composição e tratamento
de exceções, mas pode ser melhorado em termos de organização e legibilidade.

═══════════════════════════════════════════════════════════
Este feedback foi gerado automaticamente por IA e pode
necessitar de revisão pelo professor.
