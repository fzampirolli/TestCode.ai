
FEEDBACK DA AVALIAÇÃO - Prova 1 - POO
═══════════════════════════════════════════════════════════
Estudante: StudentTwo SurnameTwo (fzampirolli2)
Data: 2025-09-17 08:41:08
Nota Final (HIGHEST de 3 tentativas): 95.00 pontos
Total de Chamadas à API: 3

Observação: A 'Nota Final' é o resultado do critério 'HIGHEST' aplicado a 3 tentativas. O feedback
detalhado e as notas por questão abaixo referem-se especificamente à tentativa com a MAIOR nota.

### Questão 1: Padrão Singleton

#### Análise do Código

O código submetido implementa uma classe `GerenciadorMensagens` que parece seguir o padrão
Singleton. Aqui está a análise detalhada com base nos critérios fornecidos:

1. **Instância Única**:
   - ✅ CORRETO: A classe utiliza um atributo estático/privado `_unica_instancia` para armazenar a
instância única.
   - ✅ CORRETO: A verificação é feita no método `__new__` para garantir que apenas uma instância
seja criada.

2. **Método de Acesso**:
   - ⚠️ PARCIALMENTE CORRETO: O método `__new__` atua como um método de acesso controlado, mas não
há um método explícito como `getInstance()` ou similar. Contudo, o objetivo é atendido através do
`__new__`.

3. **Construtor Privado/Protegido**:
   - ✅ CORRETO: O construtor é controlado através do método `__new__`, o que impede a criação direta
de instâncias.

4. **Execução Correta**:
   - ✅ CORRETO: O código parece executar sem erros de sintaxe, e a lógica é coerente.

#### Nota
- ✅ TODOS os critérios praticamente corretos, com pequena flexibiliddade no método de acesso.
- Nota: 20 pontos (3 critérios corretos, 1 parcialmente correto)

#### Comentário
A implementação do padrão Singleton está quase perfeita. A única observação é que,
convencionalmente, espera-se um método de acesso explícito como `getInstance()`, mas o uso de
`__new__` aqui atende bem ao requisito.

### Questão 2: Herança, Composição e Exceções

#### Análise do Código

1. **Classe Abstrata Base**:
   - ✅ CORRETO: A classe `ProgramaAcademico` é abstrata e bem definida.

2. **Método Abstrato**:
   - ✅ CORRETO: O método `calcular_carga_total` é abstrato e implementado corretamente nas
subclasses.

3. **Herança Correta**:
   - ✅ CORRETO: As subclasses `EnsinoGraduacao` e `EnsinoPosGraduacao` herdam corretamente.

4. **Classe Auxiliar**:
   - ✅ CORRETO: A classe `ComponenteCurricular` atua como uma classe auxiliar.

5. **Composição/Agregação**:
   - ✅ CORRETO: O relacionamento de composição é implementado funcionalmente.

6. **Tratamento de Exceções**:
   - ✅ CORRETO: Exceções são tratadas no construtor de `ProgramaAcademico`.

7. **Execução Correta**:
   - ✅ CORRETO: O código funciona sem erros aparentes.

#### Nota
- ✅ TODOS os critérios corretos.
- Nota: 75 pontos

#### Comentário
A implementação está completa e correta, atendendo a todos os critérios de herança, composição, e
tratamento de exceções.

### Formato de Saída Obrigatório

```
QUESTAO_Q1: 20/25 - Implementação quase perfeita do padrão Singleton, apenas com uma leve diferença
na abordagem do método de acesso.
QUESTAO_Q2: 75/75 - Implementação perfeita de Herança, Composição e Exceções.
==================================================
📊 CORREÇÃO AUTOMÁTICA — Q1: 20 pontos (máx:25)
==================================================
==================================================
📊 CORREÇÃO AUTOMÁTICA — Q2: 75 pontos (máx:75)
==================================================
```

═══════════════════════════════════════════════════════════
Este feedback foi gerado automaticamente por IA e pode
necessitar de revisão pelo professor.
