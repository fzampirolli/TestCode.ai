# AVALIA√á√ÉO AUTOMATIZADA DETALHADA - Prova 1 - POO
Data: 2025-09-17 08:40:04

## INSTRU√á√ïES GERAIS
Voc√™ √© um professor assistente especialista. Analise o c√≥digo do aluno para cada quest√£o COM BASE EM CADA ITEM DA RUBRICA FORNECIDA.
Forne√ßa um feedback DETALHADO!

Para cada quest√£o, CONSIDERANDO RIGOROSAMENTE A RUBRICA FORNECIDA:
1.  Forne√ßa um feedback construtivo e aprofundado.
2.  Destaque os pontos positivos e onde o aluno acertou.
3.  Aponte os erros ou √°reas de melhoria de forma clara.
4.  Ofere√ßa sugest√µes pr√°ticas e exemplos de como o c√≥digo poderia ser melhorado ou corrigido.
5.  No final da an√°lise de cada quest√£o, forne√ßa a nota formatada.

PARA CADA ITEM X DA RUBRICA, explique se foi atendido ou n√£o, e por qu√™:
   - ‚úÖ CORRETO: item X atendido
   - ‚ùå INCORRETO: item X n√£o atendido
   - ‚ö†Ô∏è PARCIALMENTE CORRETO: item X atendido parcialmente

FORMATO DE SA√çDA OBRIGAT√ìRIO DA NOTA DE CADA QUEST√ÉO:
- QUESTAO_[ID]: [NOTA]/[MAXIMO] - [coment√°rio breve]

---
## Padr√£o Singleton (Q1) - M√°ximo: 25 pontos

### RUBRICA DE AVALIA√á√ÉO:
########################################################################
# RUBRICA DE CORRE√á√ÉO - QUEST√ÉO 1: PADR√ÉO SINGLETON                    #
########################################################################

## CONTEXTO DA QUEST√ÉO
Avalie exclusivamente se o c√≥digo implementa corretamente o padr√£o 
Singleton conforme especificado no enunciado da prova.

## CRIT√âRIOS DE AVALIA√á√ÉO (Todos devem estar presentes)

### 1. INST√ÇNCIA √öNICA (Obrigat√≥rio)
‚úÖ CORRETO: Existe mecanismo para garantir apenas uma inst√¢ncia
   - Atributo est√°tico/privado para armazenar a inst√¢ncia
   - Verifica√ß√£o se inst√¢ncia j√° existe antes de criar nova
‚ùå INCORRETO: Permite m√∫ltiplas inst√¢ncias ou n√£o tem controle

### 2. M√âTODO DE ACESSO (Obrigat√≥rio)  
‚úÖ CORRETO: M√©todo p√∫blico que retorna sempre a mesma inst√¢ncia
   - M√©todo est√°tico (ex: getInstance(), get_instance())
   - Retorna a inst√¢ncia √∫nica, criando apenas se n√£o existir
‚ùå INCORRETO: N√£o tem m√©todo de acesso ou permite m√∫ltiplos objetos

### 3. CONSTRUTOR PRIVADO/PROTEGIDO (Obrigat√≥rio)
‚úÖ CORRETO: Construtor inacess√≠vel externamente
   - Construtor privado (Java/C++) ou m√©todo __new__ controlado (Python)
   - Imposs√≠vel criar inst√¢ncias via new/() diretamente
‚ùå INCORRETO: Construtor p√∫blico permite instancia√ß√£o direta

### 4. EXECU√á√ÉO CORRETA (Obrigat√≥rio)
‚úÖ CORRETO: C√≥digo executa sem erros de sintaxe
   - Sintaxe v√°lida na linguagem utilizada
   - L√≥gica coerente e funcional
‚ùå INCORRETO: Erros de compila√ß√£o/execu√ß√£o ou l√≥gica inv√°lida

## SISTEMA DE PONTUA√á√ÉO (Escala: 0 a 25 pontos)

- **25 pontos**: TODOS os 4 crit√©rios corretos (implementa√ß√£o perfeita)
- **20 pontos**: 3 crit√©rios corretos, 1 incorreto (quase perfeito)  
- **15 pontos**: 2 crit√©rios corretos, 2 incorretos (implementa√ß√£o parcial)
- **10 pontos**: 1 crit√©rio correto, 3 incorretos (tentativa m√≠nima)
- **5 pontos**: Tentativa de implementa√ß√£o, mas todos os crit√©rios falham
- **0 pontos**: Ausente, vazio ou completamente incorreto

## FORMATO OBRIGAT√ìRIO DA RESPOSTA

Sua an√°lise deve OBRIGATORIAMENTE terminar com este formato exato:

==================================================
üìä CORRE√á√ÉO AUTOM√ÅTICA ‚Äî Q1: XX pontos (m√°x: 25)
==================================================

Onde XX √© a nota de 0 a 25 baseada nos crit√©rios acima.


### C√ìDIGO SUBMETIDO PELO ALUNO:
```
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;

/**
 * Implementa√ß√£o de um sistema de notifica√ß√µes com inst√¢ncia √∫nica (Singleton).
 */
public class Q1 {

    // Classe respons√°vel por gerenciar notifica√ß√µes
    public static class GerenciadorNotificacoes {

        private static GerenciadorNotificacoes instanciaUnica;
        private final ArrayList<String> filaNotificacoes;

        private GerenciadorNotificacoes() {
            filaNotificacoes = new ArrayList<>();
        }

        // M√©todo est√°tico para acessar a inst√¢ncia √∫nica
        public static GerenciadorNotificacoes acessar() {
            if (instanciaUnica == null) {
                instanciaUnica = new GerenciadorNotificacoes();
                System.out.println("Sistema de notifica√ß√µes iniciado");
            } else {
                System.out.println("Sistema j√° em execu√ß√£o");
            }
            return instanciaUnica;
        }

        // Adiciona uma nova notifica√ß√£o
        public void incluir(String mensagem) {
            filaNotificacoes.add(mensagem);
            System.out.println("Notifica√ß√£o registrada: " + mensagem);
        }

        // Exibe todas as notifica√ß√µes armazenadas
        public void exibir() {
            System.out.println("Lista de notifica√ß√µes:");
            for (String msg : filaNotificacoes) {
                System.out.println(msg);
            }
        }
    }

    // Programa principal
    public static void main(String[] args) throws IOException {
        BufferedReader leitor = new BufferedReader(new InputStreamReader(System.in));
        String primeiraEntrada = leitor.readLine();
        GerenciadorNotificacoes notificacoes = GerenciadorNotificacoes.acessar();

        String comando;
        while ((comando = leitor.readLine()) != null) {
            switch (comando) {
                case "nova_instancia":
                    GerenciadorNotificacoes.acessar();
                    break;
                case "adicionar":
                    notificacoes.incluir(primeiraEntrada);
                    break;
                case "listar":
                    notificacoes.exibir();
                    break;
                default:
                    System.out.println("Comando desconhecido: " + comando);
            }
        }
    }
}

```

Lembre-se de incluir a linha: QUESTAO_Q1: [NOTA]/25 - [coment√°rio]

---
## Heran√ßa, Composi√ß√£o e Exce√ß√µes (Q2) - M√°ximo: 75 pontos

### RUBRICA DE AVALIA√á√ÉO:
########################################################################
# RUBRICA DE CORRE√á√ÉO - QUEST√ÉO 2: HERAN√áA, COMPOSI√á√ÉO E EXCE√á√ïES      #
########################################################################

## CONTEXTO DA QUEST√ÉO
Avalie se o c√≥digo implementa corretamente:
- Heran√ßa com classe abstrata e m√©todos abstratos
- Composi√ß√£o/Agrega√ß√£o com classe auxiliar
- Tratamento de exce√ß√µes em construtores

## CRIT√âRIOS DE AVALIA√á√ÉO (Todos devem estar presentes)

### 1. CLASSE ABSTRATA BASE (Obrigat√≥rio ‚Äî 10 pontos)
‚úÖ CORRETO: Classe base abstrata bem definida
   - Classe marcada como abstrata (abstract class, ABC, virtual)
   - Cont√©m atributos b√°sicos especificados no enunciado
   - Estrutura coerente para heran√ßa
‚ùå INCORRETO: N√£o √© abstrata ou faltam atributos essenciais

### 2. M√âTODO ABSTRATO (Obrigat√≥rio ‚Äî 10 pontos)
‚úÖ CORRETO: M√©todo abstrato implementado corretamente
   - Definido na classe base como abstrato
   - Sobrescrito em TODAS as subclasses filhas
   - L√≥gica espec√≠fica por subclasse (ex.: c√°lculo de pre√ßo, desconto)
‚ùå INCORRETO: N√£o √© abstrato ou n√£o foi sobrescrito corretamente

### 3. HERAN√áA CORRETA (Obrigat√≥rio ‚Äî 10 pontos)
‚úÖ CORRETO: Subclasses herdam da classe abstrata
   - Sintaxe de heran√ßa correta na linguagem
   - Implementam todos os m√©todos abstratos obrigat√≥rios
   - Adicionam funcionalidades espec√≠ficas quando necess√°rio
‚ùå INCORRETO: N√£o herdam ou heran√ßa mal implementada

### 4. CLASSE AUXILIAR (Obrigat√≥rio ‚Äî 10 pontos)
‚úÖ CORRETO: Classe auxiliar bem definida
   - Classe separada com pelo menos um atributo
   - Representa conceito coerente (ex.: Autor, Equipamento, Disciplina)
   - Estrutura adequada para composi√ß√£o/agrega√ß√£o
‚ùå INCORRETO: Ausente ou inadequada para composi√ß√£o

### 5. COMPOSI√á√ÉO/AGREGA√á√ÉO (Obrigat√≥rio ‚Äî 10 pontos)
‚úÖ CORRETO: Relacionamento implementado funcionalmente
   - Classe principal cont√©m lista/cole√ß√£o de objetos auxiliares
   - M√©todo para adicionar objetos √† cole√ß√£o
   - Relacionamento coerente e funcional
‚ùå INCORRETO: N√£o implementa relacionamento ou mal funcional

### 6. TRATAMENTO DE EXCE√á√ïES (Obrigat√≥rio ‚Äî 10 pontos)
‚úÖ CORRETO: Exce√ß√µes tratadas no construtor
   - Valida√ß√£o de par√¢metros (ex.: valores negativos, nulos)
   - Lan√ßa exce√ß√£o apropriada (ValueError, IllegalArgumentException, etc.)
   - Try/catch ou valida√ß√£o pr√©via adequada
‚ùå INCORRETO: N√£o trata exce√ß√µes ou tratamento inadequado

### 7. EXECU√á√ÉO CORRETA (Obrigat√≥rio ‚Äî 15 pontos)
‚úÖ CORRETO: C√≥digo funciona sem erros
   - Sintaxe correta na linguagem utilizada
   - L√≥gica coerente e execut√°vel
‚ùå INCORRETO: Erros de compila√ß√£o/execu√ß√£o

## SISTEMA DE PONTUA√á√ÉO (Escala: 0 a 75 pontos)

Some os pontos de cada crit√©rio conforme atribu√≠do acima.

## FORMATO OBRIGAT√ìRIO DA RESPOSTA

Sua an√°lise deve OBRIGATORIAMENTE terminar com este formato exato:

==================================================
üìä CORRE√á√ÉO AUTOM√ÅTICA ‚Äî Q2: XX pontos (m√°x: 75)
==================================================

Onde XX √© a nota de 0 a 75 baseada nos crit√©rios acima.


### C√ìDIGO SUBMETIDO PELO ALUNO:
```
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

/**
 * Exemplo de hierarquia de cursos usando heran√ßa e classe abstrata.
 */
public class Q2 {

    // Classe base abstrata
    public abstract static class Curso {
        protected String titulo;
        protected int duracaoSemestres;
        protected List<UnidadeCurricular> unidades;

        public Curso(String titulo, int duracaoSemestres) {
            if (duracaoSemestres < 0) {
                throw new DuracaoInvalidaException();
            }
            this.titulo = titulo;
            this.duracaoSemestres = duracaoSemestres;
            this.unidades = new ArrayList<>();
        }

        // M√©todo abstrato para c√°lculo de carga hor√°ria
        public abstract int obterCargaHoraria();

        // Adiciona disciplina ao curso
        public void incluirUnidade(UnidadeCurricular uc) {
            unidades.add(uc);
        }

        // Exibe informa√ß√µes do curso
        public void apresentar() {
            System.out.println("Carga hor√°ria total: " + obterCargaHoraria());
            StringBuilder buffer = new StringBuilder("Componentes curriculares: ");
            for (int i = 0; i < unidades.size(); i++) {
                buffer.append(unidades.get(i).rotulo);
                if (i < unidades.size() - 1) {
                    buffer.append("; ");
                }
            }
            System.out.println(buffer);
        }
    }

    // Curso de gradua√ß√£o
    public static class CursoGraduacao extends Curso {
        public CursoGraduacao(String titulo, int duracaoSemestres) {
            super(titulo, duracaoSemestres);
            System.out.println("Curso de gradua√ß√£o criado");
        }

        @Override
        public int obterCargaHoraria() {
            return duracaoSemestres * 180;
        }
    }

    // Curso de p√≥s-gradua√ß√£o
    public static class CursoPosGraduacao extends Curso {
        public CursoPosGraduacao(String titulo, int duracaoSemestres) {
            super(titulo, duracaoSemestres);
            System.out.println("Curso de p√≥s-gradua√ß√£o criado");
        }

        @Override
        public int obterCargaHoraria() {
            return duracaoSemestres * 140;
        }
    }

    // Representa uma disciplina/unidade curricular
    public static class UnidadeCurricular {
        String rotulo;

        public UnidadeCurricular(String rotulo) {
            this.rotulo = rotulo;
        }
    }

    // Exce√ß√£o personalizada para valores inv√°lidos
    public static class DuracaoInvalidaException extends RuntimeException {
        public DuracaoInvalidaException() {
            super("Erro: dura√ß√£o informada inv√°lida");
        }
    }

    // Programa principal
    public static void main(String[] args) throws IOException {
        BufferedReader leitor = new BufferedReader(new InputStreamReader(System.in));
        String[] dadosCurso = leitor.readLine().split("; ");
        try {
            int semestres = Integer.parseInt(dadosCurso[1]);
            Curso cursoEscolhido;

            if ("pos".equalsIgnoreCase(dadosCurso[2])) {
                cursoEscolhido = new CursoPosGraduacao(dadosCurso[0], semestres);
            } else {
                cursoEscolhido = new CursoGraduacao(dadosCurso[0], semestres);
            }

            String[] dadosDisciplinas = leitor.readLine().split("; ");
            for (String nome : dadosDisciplinas) {
                cursoEscolhido.incluirUnidade(new UnidadeCurricular(nome));
            }

            cursoEscolhido.apresentar();
        } catch (DuracaoInvalidaException e) {
            System.out.println(e.getMessage());
        }
    }
}

```

Lembre-se de incluir a linha: QUESTAO_Q2: [NOTA]/75 - [coment√°rio]
