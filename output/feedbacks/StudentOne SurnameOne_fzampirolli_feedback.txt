
FEEDBACK DA AVALIAÇÃO - Prova 1 - POO
═══════════════════════════════════════════════════════════
Estudante: StudentOne SurnameOne (fzampirolli)
Data: 2025-09-15 08:49:42
Nota Final (HIGHEST de 3 tentativas): 100.00 pontos
Total de Chamadas à API: 3

Observação: A 'Nota Final' é o resultado do critério 'HIGHEST' aplicado a 3 tentativas. O feedback
detalhado e as notas por questão abaixo referem-se especificamente à tentativa com a MAIOR nota.

## Análise da Questão 1 - Padrão Singleton

O código submetido pelo aluno implementa o padrão Singleton para a classe `CentralNotificacoes`.
Vamos avaliar cada critério da rubrica:

### 1. INSTÂNCIA ÚNICA

✅ CORRETO: O código utiliza um atributo estático `instance` para armazenar a instância única da
classe `CentralNotificacoes`. Além disso, o método `getInstance()` verifica se a instância já existe
antes de criar uma nova.

### 2. MÉTODO DE ACESSO

✅ CORRETO: O método `getInstance()` é estático e retorna sempre a mesma instância da classe
`CentralNotificacoes`. Se a instância não existir, ele a cria e a armazena no atributo `instance`.

### 3. CONSTRUTOR PRIVADO/PROTEGIDO

✅ CORRETO: O construtor da classe `CentralNotificacoes` é privado, o que impede a criação de
instâncias diretas da classe. A criação de instâncias é controlada pelo método `getInstance()`.

### 4. EXECUÇÃO CORRETA

✅ CORRETO: O código executa sem erros de sintaxe e a lógica é coerente. O padrão Singleton é
implementado corretamente.

Com base na análise, o aluno atendeu a todos os critérios da rubrica. Portanto, a nota para a
Questão 1 é:

QUESTAO_Q1: 25/25 - Implementação correta do padrão Singleton.

## Análise da Questão 2 - Herança, Composição e Exceções

O código submetido pelo aluno implementa herança, composição e tratamento de exceções. Vamos avaliar
cada critério da rubrica:

### 1. CLASSE ABSTRATA BASE

✅ CORRETO: A classe `Curso` é abstrata e bem definida, contendo atributos básicos como `nome` e
`duracao`.

### 2. MÉTODO ABSTRATO

✅ CORRETO: O método `calcularCargaHoraria()` é abstrato e implementado corretamente nas subclasses
`Graduacao` e `PosGraduacao`.

### 3. HERANÇA CORRETA

✅ CORRETO: As subclasses `Graduacao` e `PosGraduacao` herdam da classe `Curso` e implementam os
métodos abstratos obrigatórios.

### 4. CLASSE AUXILIAR

✅ CORRETO: A classe `Disciplina` é uma classe auxiliar bem definida, representando um conceito
coerente.

### 5. COMPOSIÇÃO/AGREGAÇÃO

✅ CORRETO: A classe `Curso` contém uma lista de objetos `Disciplina`, implementando um
relacionamento de composição.

### 6. TRATAMENTO DE EXCEÇÕES

✅ CORRETO: O código trata exceções no construtor da classe `Curso`, lançando uma exceção
`ValueError` se a duração for inválida.

### 7. EXECUÇÃO CORRETA

✅ CORRETO: O código executa sem erros de sintaxe e a lógica é coerente.

Com base na análise, o aluno atendeu a todos os critéririos da rubrica. Portanto, a nota para a
Questão 2 é:

QUESTAO_Q2: 75/75 - Implementação correta de herança, composição e tratamento de exceções.

==================================================
📊 CORREÇÃO AUTOMÁTICA — Q1: 25 pontos (máx: 25)
==================================================
==================================================
📊 CORREÇÃO AUTOMÁTICA — Q2: 75 pontos (máx: 75)
==================================================

═══════════════════════════════════════════════════════════
Este feedback foi gerado automaticamente por IA e pode
necessitar de revisão pelo professor.
