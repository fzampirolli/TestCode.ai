
FEEDBACK DA AVALIAÇÃO - OOP Assessment - P1
═══════════════════════════════════════════════════════════
Aluno: StudentOne SurnameOne (fzampirolli)
Data: 2025-09-13 21:08:31
Nota Final (de 1 tentativa): 85.00 pontos
Total de Chamadas à API: 1

### Questão 1: Padrão Singleton

#### Análise do Código

O código submetido implementa uma classe `CentralNotificacoes` dentro de uma classe `Q1`. A classe
`CentralNotificacoes` parece seguir o padrão Singleton, com um atributo estático privado `instance`
para armazenar a instância única, um construtor privado para evitar instanciação direta e um método
estático `getInstance()` para acessar a instância.

#### Critérios de Avaliação

1. **Instância Única**: ✅ CORRETO - Existe um mecanismo para garantir apenas uma instância.
   - Atributo estático/privado `instance` para armazenar a instância.
   - Verificação se instância já existe antes de criar nova em `getInstance()`.

2. **Método de Acesso**: ✅ CORRETO - Método público que retorna sempre a mesma instância.
   - Método estático `getInstance()` que retorna a instância única.

3. **Construtor Privado/Protegido**: ✅ CORRETO - Construtor inacessível externamente.
   - Construtor privado `private CentralNotificacoes()`.

4. **Execução Correta**: ⚠️ PARCIALMENTE CORRETO - Código executa sem erros de sintaxe, mas...
   - A lógica é coerente, mas o código não foi testado com entradas variadas.

#### Feedback

- O código implementa corretamente o padrão Singleton.
- Sugestão: Adicionar comentários para explicar a lógica e considerar thread-safety para acesso
concorrente à instância.

#### Nota

QUESTAO_Q1: 20/25 - Implementação quase perfeita do padrão Singleton, faltando apenas considerações
de thread-safety.

==================================================
📊 CORREÇÃO AUTOMÁTICA — Q1: 20 pontos (máx:25)
==================================================

### Questão 2: Herança, Composição e Exceções

#### Análise do Código

O código define uma classe abstrata `Curso` com subclasses `Graduacao` e `PosGraduacao`, além de uma
classe `Disciplina`. Há um tratamento de exceção para duração inválida.

#### Critérios de Avaliação

1. **Classe Abstrata Base**: ✅ CORRETO - Classe base abstrata bem definida.
   - Classe `Curso` marcada como abstrata.

2. **Método Abstrato**: ✅ CORRETO - Método abstrato implementado corretamente.
   - Método `calcularCargaHoraria()` definido como abstrato e implementado nas subclasses.

3. **Herança Correta**: ✅ CORRETO - Subclasses herdam da classe abstrata.
   - Subclasses `Graduacao` e `PosGraduacao` herdam de `Curso`.

4. **Classe Auxiliar**: ✅ CORRETO - Classe auxiliar bem definida.
   - Classe `Disciplina` representa um conceito coerente.

5. **Composição/Agregação**: ✅ CORRETO - Relacionamento implementado funcionalmente.
   - Classe `Curso` contém lista de `Disciplina`.

6. **Tratamento de Exceções**: ⚠️ PARCIALMENTE CORRETO - Exceções tratadas no construtor.
   - Lança exceção `ValueError` para duração inválida, mas `ValueError` deve ser
`IllegalArgumentException` em Java.

7. **Execução Correta**: ⚠️ PARCIALMENTE CORRETO - Código funciona sem erros de compilação, mas...
   - Pode haver erros de execução se as entradas forem inválidas.

#### Feedback

- O código implementa corretamente herança, composição e tratamento de exceções.
- Sugestão: Corrigir o tipo de exceção para `IllegalArgumentException` e considerar mais casos de
teste.

#### Nota

QUESTAO_Q2: 65/75 - Implementação boa, mas com pequenos ajustes necessários para perfeição.

==================================================
📊 CORREÇÃO AUTOMÁTICA — Q2: 65 pontos (máx:75)
==================================================

═══════════════════════════════════════════════════════════
Este feedback foi gerado automaticamente por IA e pode
necessitar de revisão pelo professor.
