
FEEDBACK DA AVALIAÇÃO - Prova 1 - POO
═══════════════════════════════════════════════════════════
Estudante: StudentOne SurnameOne (fzampirolli)
Data: 2025-09-17 08:41:08
Nota Final (HIGHEST de 3 tentativas): 100.00 pontos
Total de Chamadas à API: 3

Observação: A 'Nota Final' é o resultado do critério 'HIGHEST' aplicado a 3 tentativas. O feedback
detalhado e as notas por questão abaixo referem-se especificamente à tentativa com a MAIOR nota.

## Análise da Questão 1 - Padrão Singleton

### Avaliação do Código

O código implementa uma classe `GerenciadorNotificacoes` dentro da classe `Q1`, utilizando o padrão
Singleton para gerenciar notificações. Vamos avaliar se o código atende aos critérios da rubrica
fornecida.

1. **Instância Única**:
   - ✅ CORRETO: O código possui um atributo estático privado `instanciaUnica` para armazenar a
instância única.
   - ✅ CORRETO: O método `acessar()` verifica se a instância já existe antes de criar uma nova.

2. **Método de Acesso**:
   - ✅ CORRETO: O método `acessar()` é público e estático, retornando sempre a mesma instância.
   - ✅ CORRETO: A instância é criada apenas se não existir.

3. **Construtor Privado/Protegido**:
   - ✅ CORRETO: O construtor `GerenciadorNotificacoes()` é privado, impedindo a criação de
instâncias diretamente.

4. **Execução Correta**:
   - ✅ CORRETO: O código executa sem erros de sintaxe e a lógica é coerente.

### Pontuação

Todos os critérios obrigatórios foram atendidos corretamente. Portanto, a implementação está
perfeita.

### Nota Formatada
==================================================
📊 CORREÇÃO AUTOMÁTICA — Q1: 25 pontos (máx:25)
==================================================
QUESTAO_Q1: 25/25 - Implementação perfeita do padrão Singleton.

---

## Análise da Questão 2 - Herança, Composição e Exceções

### Avaliação do Código

O código implementa uma hierarquia de cursos utilizando herança, composição e tratamento de
exceções. Vamos avaliar se o código atende aos critérios da rubrica fornecida.

1. **Classe Abstrata Base**:
   - ✅ CORRETO: A classe `Curso` é abstrata e contém atributos básicos (`titulo`,
`duracaoSemestres`, `unidades`).

2. **Método Abstrato**:
   - ✅ CORRETO: O método `obterCargaHoraria()` é abstrato e definido na classe base.
   - ✅ CORRETO: É sobrescrito em todas as subclasses (`CursoGraduacao` e `CursoPosGraduacao`).

3. **Herança Correta**:
   - ✅ CORRETO: As subclasses (`CursoGraduacao` e `CursoPosGraduacao`) herdam da classe abstrata
`Curso`.
   - ✅ CORRETO: Implementam o método abstrato `obterCargaHoraria()`.

4. **Classe Auxiliar**:
   - ✅ CORRETO: A classe `UnidadeCurricular` é uma classe auxiliar bem definida com atributo
`rotulo`.

5. **Composição/Agregação**:
   - ✅ CORRETO: A classe `Curso` contém uma lista de `UnidadeCurricular` e possui método para
adicionar unidades.

6. **Tratamento de Exceções**:
   - ✅ CORRETO: O construtor de `Curso` valida a duração e lança `DuracaoInvalidaException` se for
negativa.

7. **Execução Correta**:
   - ✅ CORRETO: O código funciona sem erros de compilação/execução.

### Pontuação

Todos os critérios obrigatórios foram atendidos corretamente. A pontuação total é a soma dos pontos
de cada critério:
- Classe Abstrata Base: 10 pontos
- Método Abstrato: 10 pontos
- Herança Correta: 10 pontos
- Classe Auxiliar: 10 pontos
- Composição/Agregação: 10 pontos
- Tratamento de Exceções: 10 pontos
- Execução Correta: 15 pontos
Total: 75 pontos

### Nota Formatada
==================================================
📊 CORREÇÃO AUTOMÁTICA — Q2: 75 pontos (máx:75)
==================================================
QUESTAO_Q2: 75/75 - Implementação perfeita de herança, composição e exceções.

═══════════════════════════════════════════════════════════
Este feedback foi gerado automaticamente por IA e pode
necessitar de revisão pelo professor.
