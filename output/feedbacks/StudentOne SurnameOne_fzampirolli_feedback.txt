
FEEDBACK DA AVALIAÇÃO - Prova 1 - POO
═══════════════════════════════════════════════════════════
Estudante: StudentOne SurnameOne (fzampirolli)
Data: 2025-09-16 18:56:28
Nota Final (HIGHEST de 3 tentativas): 95.00 pontos
Total de Chamadas à API: 3

Observação: A 'Nota Final' é o resultado do critério 'HIGHEST' aplicado a 3 tentativas. O feedback
detalhado e as notas por questão abaixo referem-se especificamente à tentativa com a MAIOR nota.

### Questão 1: Padrão Singleton

#### Análise do Código

O código submetido implementa uma classe `CentralNotificacoes` dentro de uma classe `Q1`. A classe
`CentralNotificacoes` parece seguir o padrão Singleton, com um atributo estático privado `instance`
para armazenar a instância única e um método estático `getInstance()` para acessá-la.

#### Critérios de Avaliação

1. **Instância Única**:
   - ✅ CORRETO: Existe um mecanismo para garantir apenas uma instância. O atributo `instance` é
estático e privado, e o método `getInstance()` verifica se a instância já existe antes de criá-la.

2. **Método de Acesso**:
   - ✅ CORRETO: O método `getInstance()` é público e estático, retornando sempre a mesma instância.
Ele cria a instância apenas se ela não existir.

3. **Construtor Privado/Protegido**:
   - ✅ CORRETO: O construtor de `CentralNotificacoes` é privado, impedindo a instanciação direta de
fora da classe.

4. **Execução Correta**:
   - ⚠️ PARCIALMENTE CORRETO: O código parece executar sem erros de sintaxe. No entanto, a lógica
pode ser testada melhor com um exemplo de uso mais completo. O `main` tenta ler inputs do usuário,
mas pode não cobrir todos os casos.

#### Nota
- ✅ TODOS os critérios estão presentes, mas com uma observação na execução correta devido à
dependência de input do usuário.

#### Formato de Saída Obrigatório

```plaintext
QUESTAO_Q1: 25/25 - Implementação correta do padrão Singleton.
==================================================
📊 CORREÇÃO AUTOMÁTICA — Q1: 25 pontos (máx:25)
==================================================
```

### Questão 2: Herança, Composição e Exceções

#### Análise do Código

O código define uma classe abstrata `Curso` com subclasses `Graduacao` e `PosGraduacao`, além de uma
classe `Disciplina`. Há um relacionamento de composição entre `Curso` e `Disciplina`.

#### Critérios de Avaliação

1. **Classe Abstrata Base**:
   - ✅ CORRETO: A classe `Curso` é abstrata e bem definida, com atributos básicos.

2. **Método Abstrato**:
   - ✅ CORRETO: O método `calcularCargaHoraria` é abstrato e implementado corretamente nas
subclasses.

3. **Herança Correta**:
   - ✅ CORRETO: As subclasses herdam corretamente de `Curso` e implementam o método abstrato.

4. **Classe Auxiliar**:
   - ✅ CORRETO: A classe `Disciplina` é uma classe auxiliar bem definida.

5. **Composição/Agregação**:
   - ✅ CORRETO: O relacionamento de composição entre `Curso` e `Disciplina` é implementado
funcionalmente.

6. **Tratamento de Exceções**:
   - ✅ CORRETO: Exceções são tratadas no construtor de `Curso` para duração inválida.

7. **Execução Correta**:
   - ⚠️ PARCIALMENTE CORRETO: O código parece executar sem erros de compilação, mas a lógica depende
de inputs do usuário.

#### Nota
- A implementação está quase perfeita, mas merece atenção especial na leitura de inputs e tratamento
de exceções em tempo de execução.

#### Formato de Saída Obrigatório

```plaintext
QUESTAO_Q2: 70/75 - Implementação correta de herança, composição e exceções, com pequenos ajustes
necessários para inputs e exceções.
==================================================
📊 CORREÇÃO AUTOMÁTICA — Q2: 70 pontos (máx:75)
==================================================
```

═══════════════════════════════════════════════════════════
Este feedback foi gerado automaticamente por IA e pode
necessitar de revisão pelo professor.
