
FEEDBACK DA AVALIAÇÃO - Prova 1 - POO
═══════════════════════════════════════════════════════════
Aluno: StudentThree SurnameThree (fzampirolli2)
Data: 2025-09-14 21:27:34
Nota Final (de 1 tentativa): 60.00 pontos
Total de Chamadas à API: 1

## Análise da Prova - Avaliação Automatizada Detalhada

**QUESTAO_Q1: 15/25 - Implementação do padrão Singleton com algumas falhas.**

**Feedback:**

O código demonstra um esforço para implementar o padrão Singleton, mas apresenta algumas falhas que
impedem a obtenção da nota máxima.

**Pontos Positivos:**

* **Instância Única:** O código utiliza um atributo estático `_instancia` para armazenar a única
instância da classe `SomSistema`.
* **Verificação de Instância:** Existe uma verificação se a instância já existe antes de criar uma
nova.

**Pontos a Melhorar:**

* **Método de Acesso:** O método `__new__` é utilizado para controlar a criação da instância, mas
não há um método público estático (como `getInstance()`) para acessar a instância única.
* **Construtor Privado:** O construtor `__new__` é privado, mas não há um construtor público que
seja bloqueado para evitar a criação direta de instâncias.

**Sugestões:**

1.  Adicione um método público estático `getInstance()` que retorne a instância única.
2.  Mantenha o construtor `__new__` privado para impedir a criação direta de instâncias.

**QUESTAO_Q2: 45/75 - Herança e Composição implementadas, mas com falhas em outras áreas.**

**Feedback:**

O código demonstra compreensão de herança e composição, mas apresenta problemas em relação ao
tratamento de exceções, à implementação de métodos abstratos e à consistência de nomes.

**Pontos Positivos:**

* **Herança:** A classe `Desenvolvedor` e `Gerente` herdam da classe abstrata `Funcionario`.
* **Composição:** A classe `Funcionario` possui uma lista de projetos (`listaprojetos`),
demonstrando composição.

**Pontos a Melhorar:**

* **Classe Abstrata:** A classe `Funcionario` não é declarada como abstrata, apesar de conter o
método abstrato `calcular_bonus`.
* **Método Abstrato:** O método `calcular_bonus` não é implementado na classe base `Funcionario`,
mas sim nas subclasses `Desenvolvedor` e `Gerente`.
* **Tratamento de Exceções:** O tratamento de exceções no construtor de `Funcionario` é incompleto,
apenas verificando se o salário é negativo.
* **Nomes:** A classe `Gerente` está escrita com letra minúscula, enquanto a classe `Desenvolvedor`
está com letra maiúscula, o que não é consistente.

**Sugestões:**

1.  Declarar a classe `Funcionario` como abstrata.
2.  Implementar o método `calcular_bonus` na classe `Funcionario` como um método abstrato.
3.  Melhorar o tratamento de exceções no construtor de `Funcionario`, verificando outros parâmetros
e lançando exceções mais específicas.
4.  Manter a consistência na escrita de nomes de classes (maiúscula ou minúscula).



**==================================================**
📊 CORREÇÃO AUTOMÁTICA — Q1: 15 pontos (máx: 25)
📊 CORREÇÃO AUTOMÁTICA — Q2: 45 pontos (máx: 75)
**==================================================**

═══════════════════════════════════════════════════════════
Este feedback foi gerado automaticamente por IA e pode
necessitar de revisão pelo professor.
