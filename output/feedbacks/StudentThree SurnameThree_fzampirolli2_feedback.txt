
FEEDBACK DA AVALIAÇÃO - Prova 1 - POO
═══════════════════════════════════════════════════════════
Aluno: StudentThree SurnameThree (fzampirolli2)
Data: 2025-09-15 07:23:56
Nota Final (de 1 tentativa): 45.00 pontos
Total de Chamadas à API: 1

## Análise da Questão 1 - Padrão Singleton

### Avaliação do Código

O código implementa uma classe `SomSistema` que segue o padrão Singleton. Vamos avaliar se ele
atende aos critérios da rubrica.

#### 1. INSTÂNCIA ÚNICA
✅ CORRETO: O código utiliza o método `__new__` para controlar a criação de instâncias, garantindo
que apenas uma instância seja criada.

#### 2. MÉTODO DE ACESSO
✅ CORRETO: Embora não seja explicitamente um método chamado `getInstance()`, o próprio `__new__`
atua como um método de acesso controlado à instância única.

#### 3. CONSTRUTOR PRIVADO/PROTEGIDO
✅ CORRETO: O construtor (`__new__`) é controlado e impede a criação direta de múltiplas instâncias.

#### 4. EXECUÇÃO CORRETA
✅ CORRETO: O código executa sem erros de sintaxe aparentes e a lógica parece coerente.

### Pontuação
Todos os critérios obrigatórios foram atendidos corretamente. Portanto, a implementação está
perfeita.

==================================================
📊 CORREÇÃO AUTOMÁTICA — Q1: 25 pontos (máx:25)
==================================================
QUESTAO_Q1: 25/25 - Implementação perfeita do padrão Singleton.

## Análise da Questão 2 - Herança, Composição e Exceções

### Avaliação do Código

O código tenta implementar herança, composição e exceções. Vamos avaliar se ele atende aos critérios
da rubrica.

#### 1. CLASSE ABSTRATA BASE
❌ INCORRETO: A classe `Funcionario` não é abstrata apesar de ter um método abstrato. Falta a
declaração explícita como abstrata.

#### 2. MÉTODO ABSTRATO
⚠️ PARCIALMENTE CORRETO: O método `calcular_bonus` é abstrato, mas como a classe `Funcionario` não é
declarada como abstrata, isso causa um problema.

#### 3. HERANÇA CORRETA
⚠️ PARCIALMENTE CORRETO: As subclasses `Desenvolvedor` e `Gerente` herdam de `Funcionario`, mas há
um erro de sintaxe na definição da classe `Gerente` (`funcionario` deve ser `Funcionario`).

#### 4. CLASSE AUXILIAR
✅ CORRETO: A classe `Projeto` é uma classe auxiliar bem definida.

#### 5. COMPOSIÇÃO/AGREGAÇÃO
⚠️ PARCIALMENTE CORRETO: A classe `Funcionario` contém uma lista de projetos (`listaprojetos`), mas
falta o método para adicionar projetos corretamente implementado.

#### 6. TRATAMENTO DE EXCEÇÕES
✅ CORRETO: O construtor de `Funcionario` verifica se o salário é negativo e lança uma exceção
`ValueError` apropriada.

#### 7. EXECUÇÃO CORRETA
❌ INCORRETO: O código contém vários erros de sintaxe (ex.: `tipo = entrada[2].strip().lower` deve
ser `tipo = entrada[2].strip().lower()`, `class Gerente(funcionario)` deve ser `class
Gerente(Funcionario)`, etc.) e não executa corretamente.

### Pontuação
Considerando os critérios atendidos e os erros presentes, a pontuação é baixa devido aos vários
problemas de sintaxe e lógica.

==================================================
📊 CORREÇÃO AUTOMÁTICA — Q2: 20 pontos (máx:75)
==================================================
QUESTAO_Q2: 20/75 - Implementação parcial com vários erros de sintaxe e lógica.

═══════════════════════════════════════════════════════════
Este feedback foi gerado automaticamente por IA e pode
necessitar de revisão pelo professor.
