
FEEDBACK DA AVALIAÇÃO - Prova 1 - POO
═══════════════════════════════════════════════════════════
Estudante: StudentThree SurnameThree (fzampirolli2)
Data: 2025-09-15 08:49:42
Nota Final (HIGHEST de 3 tentativas): 60.00 pontos
Total de Chamadas à API: 3

Observação: A 'Nota Final' é o resultado do critério 'HIGHEST' aplicado a 3 tentativas. O feedback
detalhado e as notas por questão abaixo referem-se especificamente à tentativa com a MAIOR nota.

### Questão 1: Padrão Singleton

#### Análise do Código:

O código submetido implementa uma classe `SomSistema` que parece seguir o padrão Singleton. Aqui
está a análise detalhada com base nos critérios fornecidos:

1. **Instância Única**:
   - ✅ CORRETO: A classe utiliza um atributo estático/privado `_instancia` para armazenar a
instância única.
   - ✅ CORRETO: Verifica se a instância já existe antes de criar uma nova no método `__new__`.

2. **Método de Acesso**:
   - ✅ CORRETO: O método `__new__` atua como um método de acesso que retorna sempre a mesma
instância, criando-a apenas se não existir.

3. **Construtor Privado/Protegido**:
   - ✅ CORRETO: O método `__new__` é utilizado de forma controlada, o que equivale a um construtor
protegido, impedindo a instanciação direta via `new`.

4. **Execução Correta**:
   - ⚠️ PARCIALMENTE CORRETO: O código apresenta sintaxe válida em Python e a lógica parece
coerente. No entanto, não foram testadas todas as possíveis condições de execução.

#### Nota:
- O aluno implementou corretamente os principais aspectos do padrão Singleton.
- A nota é **20 pontos** porque, embora a implementação esteja quase perfeita, falta uma avaliação
completa de todas as condições de execução.

#### Formato de Saída:
```
QUESTAO_Q1: 20/25 - Implementação quase perfeita do padrão Singleton, mas necessita de testes mais
abrangentes.
==================================================
📊 CORREÇÃO AUTOMÁTICA — Q1: 20 pontos (máx:25)
==================================================
```

### Questão 2: Herança, Composição e Exceções

#### Análise do Código:

O código submetido tenta implementar herança com uma classe abstrata, composição com uma classe
auxiliar e tratamento de exceções. Aqui está a análise:

1. **Classe Abstrata Base**:
   - ✅ CORRETO: A classe `Funcionario` é definida como uma classe base com atributos.

2. **Método Abstrato**:
   - ✅ CORRETO: O método `calcular_bonus` é declarado como abstrato e parece ser implementado
corretamente nas subclasses.

3. **Herança Correta**:
   - ✅ CORRETO: As classes `Desenvolvedor` e `Gerente` herdam de `Funcionario`.
   - ⚠️ PARCIALMENTE CORRETO: A classe `Gerente` apresenta um pequeno erro de sintaxe (`funcionario`
deve ser `Funcionario`).

4. **Classe Auxiliar**:
   - ⚠️ PARCIALMENTE CORRETO: A classe `Projeto` existe, mas seu construtor apresenta um erro
(`nome` não é definido).

5. **Composição/Agregação**:
   - ⚠️ PARCIALMENTE CORRETO: A classe `Funcionario` tem uma lista de projetos, mas a implementação
da composição está incompleta.

6. **Tratamento de Exceções**:
   - ✅ CORRETO: O tratamento de exceção no construtor de `Funcionario` para salário inválido é
adequado.

7. **Execução Correta**:
   - ⚠️ PARCIALMENTE CORRETO: O código apresenta erros de sintaxe e lógica.

#### Nota:
- O aluno implementou parcialmente os conceitos solicitados.
- A nota é **40 pontos** devido às várias falhas na implementação.

#### Formato de Saída:
```
QUESTAO_Q2: 40/75 - Implementação parcial com vários erros de sintaxe e lógica.
==================================================
📊 CORREÇÃO AUTOMÁTICA — Q2: 40 pontos (máx:75)
==================================================
```

═══════════════════════════════════════════════════════════
Este feedback foi gerado automaticamente por IA e pode
necessitar de revisão pelo professor.
