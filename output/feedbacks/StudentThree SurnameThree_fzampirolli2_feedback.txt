
FEEDBACK DA AVALIAÇÃO - Prova 1 - POO
═══════════════════════════════════════════════════════════
Aluno: StudentThree SurnameThree (fzampirolli2)
Data: 2025-09-13 22:05:28
Nota Final (de 1 tentativa): 55.00 pontos
Total de Chamadas à API: 1

### Questão 1: Singleton Pattern

#### Análise Detalhada

O código implementado pelo aluno para o padrão Singleton é parcialmente correto. Aqui estão os
pontos positivos e negativos:

**Pontos Positivos:**

1.  O aluno implementou o padrão Singleton, garantindo que apenas uma instância seja criada.
2.  O método `__new__` é utilizado para controlar a criação da instância, o que é uma boa prática.
3.  O aluno também implementou o método de acesso `getInstance` para retornar a instância única.

**Pontos Negativos:**

1.  O aluno não implementou o construtor privado, o que é um requisito importante para o padrão
Singleton.
2.  O método `getInstance` não é estático, o que pode causar problemas se o método for chamado em
diferentes threads.
3.  O aluno não implementou a verificação se a instância já existe antes de criar uma nova, o que
pode causar problemas se o método for chamado em diferentes threads.

**Sugestões de Melhoria:**

1.  Implemente o construtor privado para garantir que a instância seja criada apenas uma vez.
2.  Faça o método `getInstance` estático para garantir que a instância seja retornada corretamente
em diferentes threads.
3.  Verifique se a instância já existe antes de criar uma nova para garantir que a instância seja
criada apenas uma vez.

**Nota:**

QUESTAO_Q1: 15/25 - O aluno implementou o padrão Singleton, mas com alguns erros e omissões.

### Questão 2: Inheritance and Composition

#### Análise Detalhada

O código implementado pelo aluno para a herança e composição é parcialmente correto. Aqui estão os
pontos positivos e negativos:

**Pontos Positivos:**

1.  O aluno implementou a herança correta, com a classe `Funcionario` sendo a classe base e as
classes `Desenvolvedor` e `Gerente` sendo as subclasses.
2.  O aluno implementou a composição correta, com a classe `Projeto` sendo uma classe auxiliar e a
classe `Funcionario` contendo uma lista de projetos.
3.  O aluno tratou as exceções corretamente, com o método `__init__` da classe `Funcionario`
lançando uma exceção se o salário for inválido.

**Pontos Negativos:**

1.  O aluno não implementou a classe base `Funcionario` como abstrata, o que é um requisito
importante para a herança.
2.  O aluno não implementou o método abstrato `calcular_bonus` na classe base `Funcionario`, o que é
um requisito importante para a herança.
3.  O aluno não implementou a verificação se o projeto já existe antes de adicionar um novo projeto
à lista, o que pode causar problemas se o método for chamado em diferentes threads.

**Sugestões de Melhoria:**

1.  Faça a classe base `Funcionario` abstrata para garantir que as subclasses implementem o método
abstrato `calcular_bonus`.
2.  Implemente o método abstrato `calcular_bonus` na classe base `Funcionario` para garantir que as
subclasses implementem o método.
3.  Verifique se o projeto já existe antes de adicionar um novo projeto à lista para garantir que a
lista seja atualizada corretamente.

**Nota:**

QUESTAO_Q2: 40/75 - O aluno implementou a herança e composição corretamente, mas com alguns erros e
omissões.

═══════════════════════════════════════════════════════════
Este feedback foi gerado automaticamente por IA e pode
necessitar de revisão pelo professor.
