
FEEDBACK DA AVALIAÇÃO - Prova 1 - POO
═══════════════════════════════════════════════════════════
Aluno: StudentThree SurnameThree (fzampirolli2)
Data: 2025-09-15 07:35:52
Nota Final (de 1 tentativa): 63.00 pontos
Total de Chamadas à API: 1

## Análise do Código do Aluno

**QUESTAO_Q1: 18/25 -** O código implementa o padrão Singleton, mas com algumas falhas.

**Pontos Positivos:**

* **Instância Única:** O código utiliza um atributo estático `_instancia` para armazenar a única
instância da classe `SomSistema`.
* **Método de Acesso:** O método `__new__` é utilizado para garantir que apenas uma instância seja
criada e para retornar a instância existente.

**Pontos a Melhorar:**

* **Construtor Privado:** O construtor da classe `SomSistema` não é privado.
* **Execução Correta:** O código apresenta um erro de sintaxe na linha `elif comando ==
"nova_instancia":` que deveria ser `elif comando == "nova_instancia":`.

**Sugestões de Melhoria:**

1.  **Tornar o construtor privado:**  Para garantir que a instância seja criada apenas através do
método `__new__`, o construtor da classe `SomSistema` deve ser privado.

2.  **Corrigir o erro de sintaxe:**  A linha `elif comando == "nova_instancia":` deve ser corrigida
para `elif comando == "nova_instancia":`.

**QUESTAO_Q2: 45/75 -** O código demonstra compreensão dos conceitos de herança, composição e
exceções, mas apresenta algumas falhas na implementação.

**Pontos Positivos:**

* **Classe Abstrata:** A classe `Funcionario` é definida como abstrata e possui um método abstrato
`calcular_bonus`.
* **Herança:** As classes `Desenvolvedor` e `Gerente` herdam da classe `Funcionario` e implementam o
método `calcular_bonus`.
* **Classe Auxiliar:** A classe `Projeto` é definida como uma classe auxiliar.
* **Tratamento de Exceções:** O construtor da classe `Funcionario` valida o salário e lança uma
exceção `ValueError` caso seja inválido.

**Pontos a Melhorar:**

* **Método Abstrato:** O método `adicionar_projeto` na classe `Funcionario` não é abstrato, apesar
de ser um método que deveria ser implementado pelas subclasses.
* **Composição/Agregação:** A composição/agregação entre a classe `Funcionario` e a classe `Projeto`
não é implementada de forma funcional. A classe `Funcionario` não possui uma lista de projetos.
* **Execução Correta:** O código apresenta alguns erros de sintaxe e lógica.

**Sugestões de Melhoria:**

1.  **Tornar `adicionar_projeto` abstrato:**  O método `adicionar_projeto` deve ser declarado como
abstrato na classe `Funcionario`.
2.  **Implementar composição/agregação:** A classe `Funcionario` deve possuir uma lista de projetos,
e o método `adicionar_projeto` deve ser implementado para adicionar projetos a essa lista.
3.  **Corrigir erros de sintaxe e lógica:**  O código precisa ser corrigido para evitar erros de
sintaxe e lógica.


**Observações:**

* O código apresentado pelo aluno demonstra um bom entendimento dos conceitos de POO, mas precisa
ser aprimorado em termos de implementação e correção de erros.
* É importante que o aluno revise a sintaxe e a lógica do código para garantir que ele seja
executado corretamente.
* O aluno deve prestar atenção aos detalhes da implementação, como a utilização de métodos abstratos
e a composição/agregação de objetos.





═══════════════════════════════════════════════════════════
Este feedback foi gerado automaticamente por IA e pode
necessitar de revisão pelo professor.
