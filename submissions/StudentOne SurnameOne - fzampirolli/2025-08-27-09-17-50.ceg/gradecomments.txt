
-Question 1:

Avalia√ß√£o: 0.900/1 (90.00%)

>Arquivo: Q1
>Escolhido: Q1.class
Q1.java
>Habilidades: 

Avalia√ß√£o: 90.00%
-Test 4: test_4 (-10.000)
Incorrect program output
 --- Input ---
>Atualiza√ß√£o dispon√≠vel
>listar

 --- Program output ---
>Central iniciada

 --- Expected output (text)---
>Central iniciada
>Nova notifica√ß√£o: Atualiza√ß√£o dispon√≠vel
>Notifica√ß√µes:
>Alerta de bateria
>Atualiza√ß√£o dispon√≠vel
>Atualiza√ß√£o dispon√≠vel

-Summary of tests
>+------------------------------+
>| 10 tests run/ 9 tests passed |
>+------------------------------+

-Question 2:

Avalia√ß√£o: 3.000/3 (100.00%)

>Arquivo: Q2
>Escolhido: Q2.class
Q2.java
>Habilidades: 

Avalia√ß√£o: 100.00%
-Summary of tests
>+------------------------------+
>| 10 tests run/10 tests passed |
>+------------------------------+

-Nota: 97.50

-üöÄ Feedback autom√°tico gerado por IA ‚ö†Ô∏è Revise com cuidado, pode conter erros!

‚ú® Voc√© est√° quase l√°!

üß≠ Confira as dicas a seguir para ajustar seu(s) c√≥digo(s):

=== IN√çCIO [ü§ñ modelo: meta-llama/llama-4-scout-17b-16e-instruct] ===

 Segue a an√°lise dos arquivos:

**Q1.java**

1. A classe `CentralNotificacoes` implementa o padr√£o de projeto Singleton, mas n√£o √© thread-safe.
2. O m√©todo `getInstance()` imprime mensagens desnecess√°rias.
3. O m√©todo `listar()` n√£o verifica se h√° notifica√ß√µes antes de imprimir.
4. O m√©todo `adicionar()` n√£o verifica se a notifica√ß√£o √© nula antes de adicion√°-la.
5. No `main()`, a vari√°vel `notif` √© lida apenas uma vez e usada em um loop que pode n√£o ser o esperado.
6. O `while` no `main()` pode causar problemas se a entrada for muito grande.

**Q2.java**

1. A classe `Curso` tem um construtor que verifica se a dura√ß√£o √© negativa, mas n√£o verifica se o nome √© nulo ou vazio.
2. A classe `Curso` usa uma lista de disciplinas, mas n√£o verifica se as disciplinas s√£o nulas antes de adicion√°-las.
3. O m√©todo `calcularCargaHoraria()` √© abstrato e deve ser implementado pelas subclasses.
4. As subclasses `Graduacao` e `PosGraduacao` t√™m construtores que imprimem mensagens desnecess√°rias.
5. A classe `Disciplina` tem um construtor que n√£o verifica se o nome √© nulo ou vazio.
6. A classe `ValueError` √© uma exce√ß√£o personalizada, mas seu nome n√£o segue as conven√ß√µes de nomenclatura Java.
7. No `main()`, a entrada √© lida e processada sem verificar se √© v√°lida.

Orienta√ß√µes:

* Verificar se as vari√°veis s√£o nulas ou vazias antes de us√°-las.
* Implementar verifica√ß√µes de entrada para garantir que os dados sejam v√°lidos.
* Remover mensagens desnecess√°rias.
* Considerar thread-safety para a classe `CentralNotificacoes`.
* Melhorar a nomenclatura das classes e m√©todos para seguir as conven√ß√µes de nomenclatura Java.

=== FIM [‚è∞  2025-08-27 09:17:57] ===
