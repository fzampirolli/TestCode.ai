# Assessment Configuration
assessment:
  name: "Prova 1 - POO"
  date: "2025-09-12"
  course: "Programa√ß√£o Orientada a Objetos"
  llm_attempts: 3 # Number of attempts to call the LLM API in case of failure
  # "highest" to keep the highest score among attempts
  # "lowest"  to keep the lowest score among attempts
  # "average" to keep the average score among attempts
  selection_criteria: "highest"
  detailed_feedback: true

# Questions Configuration
questions:
  - id: "Q1"
    name: "Padr√£o Singleton"
    max_points: 25
    accepted_extensions: [".py", ".java", ".cpp"]
    rubric: |
      ########################################################################
      # RUBRICA DE CORRE√á√ÉO - QUEST√ÉO 1: PADR√ÉO SINGLETON                    #
      ########################################################################

      ## CONTEXTO DA QUEST√ÉO
      Avalie exclusivamente se o c√≥digo implementa corretamente o padr√£o 
      Singleton conforme especificado no enunciado da prova.

      ## CRIT√âRIOS DE AVALIA√á√ÉO (Todos devem estar presentes)

      ### 1. INST√ÇNCIA √öNICA (Obrigat√≥rio)
      ‚úÖ CORRETO: Existe mecanismo para garantir apenas uma inst√¢ncia
         - Atributo est√°tico/privado para armazenar a inst√¢ncia
         - Verifica√ß√£o se inst√¢ncia j√° existe antes de criar nova
      ‚ùå INCORRETO: Permite m√∫ltiplas inst√¢ncias ou n√£o tem controle

      ### 2. M√âTODO DE ACESSO (Obrigat√≥rio)  
      ‚úÖ CORRETO: M√©todo p√∫blico que retorna sempre a mesma inst√¢ncia
         - M√©todo est√°tico (ex: getInstance(), get_instance())
         - Retorna a inst√¢ncia √∫nica, criando apenas se n√£o existir
      ‚ùå INCORRETO: N√£o tem m√©todo de acesso ou permite m√∫ltiplos objetos

      ### 3. CONSTRUTOR PRIVADO/PROTEGIDO (Obrigat√≥rio)
      ‚úÖ CORRETO: Construtor inacess√≠vel externamente
         - Construtor privado (Java/C++) ou m√©todo __new__ controlado (Python)
         - Imposs√≠vel criar inst√¢ncias via new/() diretamente
      ‚ùå INCORRETO: Construtor p√∫blico permite instancia√ß√£o direta

      ### 4. EXECU√á√ÉO CORRETA (Obrigat√≥rio)
      ‚úÖ CORRETO: C√≥digo executa sem erros de sintaxe
         - Sintaxe v√°lida na linguagem utilizada
         - L√≥gica coerente e funcional
      ‚ùå INCORRETO: Erros de compila√ß√£o/execu√ß√£o ou l√≥gica inv√°lida

      ## SISTEMA DE PONTUA√á√ÉO (Escala: 0 a 25 pontos)

      - **25 pontos**: TODOS os 4 crit√©rios corretos (implementa√ß√£o perfeita)
      - **20 pontos**: 3 crit√©rios corretos, 1 incorreto (quase perfeito)  
      - **15 pontos**: 2 crit√©rios corretos, 2 incorretos (implementa√ß√£o parcial)
      - **10 pontos**: 1 crit√©rio correto, 3 incorretos (tentativa m√≠nima)
      - **5 pontos**: Tentativa de implementa√ß√£o, mas todos os crit√©rios falham
      - **0 pontos**: Ausente, vazio ou completamente incorreto

      ## FORMATO OBRIGAT√ìRIO DA RESPOSTA

      Sua an√°lise deve OBRIGATORIAMENTE terminar com este formato exato:

      ==================================================
      üìä CORRE√á√ÉO AUTOM√ÅTICA ‚Äî Q1: XX pontos (m√°x: 25)
      ==================================================

      Onde XX √© a nota de 0 a 25 baseada nos crit√©rios acima.
    
  - id: "Q2"
    name: "Heran√ßa, Composi√ß√£o e Exce√ß√µes"
    max_points: 75
    accepted_extensions: [".py", ".java", ".cpp"]
    rubric: |
      ########################################################################
      # RUBRICA DE CORRE√á√ÉO - QUEST√ÉO 2: HERAN√áA, COMPOSI√á√ÉO E EXCE√á√ïES      #
      ########################################################################

      ## CONTEXTO DA QUEST√ÉO
      Avalie se o c√≥digo implementa corretamente:
      - Heran√ßa com classe abstrata e m√©todos abstratos
      - Composi√ß√£o/Agrega√ß√£o com classe auxiliar
      - Tratamento de exce√ß√µes em construtores

      ## CRIT√âRIOS DE AVALIA√á√ÉO (Todos devem estar presentes)

      ### 1. CLASSE ABSTRATA BASE (Obrigat√≥rio ‚Äî 10 pontos)
      ‚úÖ CORRETO: Classe base abstrata bem definida
         - Classe marcada como abstrata (abstract class, ABC, virtual)
         - Cont√©m atributos b√°sicos especificados no enunciado
         - Estrutura coerente para heran√ßa
      ‚ùå INCORRETO: N√£o √© abstrata ou faltam atributos essenciais

      ### 2. M√âTODO ABSTRATO (Obrigat√≥rio ‚Äî 10 pontos)
      ‚úÖ CORRETO: M√©todo abstrato implementado corretamente
         - Definido na classe base como abstrato
         - Sobrescrito em TODAS as subclasses filhas
         - L√≥gica espec√≠fica por subclasse (ex.: c√°lculo de pre√ßo, desconto)
      ‚ùå INCORRETO: N√£o √© abstrato ou n√£o foi sobrescrito corretamente

      ### 3. HERAN√áA CORRETA (Obrigat√≥rio ‚Äî 10 pontos)
      ‚úÖ CORRETO: Subclasses herdam da classe abstrata
         - Sintaxe de heran√ßa correta na linguagem
         - Implementam todos os m√©todos abstratos obrigat√≥rios
         - Adicionam funcionalidades espec√≠ficas quando necess√°rio
      ‚ùå INCORRETO: N√£o herdam ou heran√ßa mal implementada

      ### 4. CLASSE AUXILIAR (Obrigat√≥rio ‚Äî 10 pontos)
      ‚úÖ CORRETO: Classe auxiliar bem definida
         - Classe separada com pelo menos um atributo
         - Representa conceito coerente (ex.: Autor, Equipamento, Disciplina)
         - Estrutura adequada para composi√ß√£o/agrega√ß√£o
      ‚ùå INCORRETO: Ausente ou inadequada para composi√ß√£o

      ### 5. COMPOSI√á√ÉO/AGREGA√á√ÉO (Obrigat√≥rio ‚Äî 10 pontos)
      ‚úÖ CORRETO: Relacionamento implementado funcionalmente
         - Classe principal cont√©m lista/cole√ß√£o de objetos auxiliares
         - M√©todo para adicionar objetos √† cole√ß√£o
         - Relacionamento coerente e funcional
      ‚ùå INCORRETO: N√£o implementa relacionamento ou mal funcional

      ### 6. TRATAMENTO DE EXCE√á√ïES (Obrigat√≥rio ‚Äî 10 pontos)
      ‚úÖ CORRETO: Exce√ß√µes tratadas no construtor
         - Valida√ß√£o de par√¢metros (ex.: valores negativos, nulos)
         - Lan√ßa exce√ß√£o apropriada (ValueError, IllegalArgumentException, etc.)
         - Try/catch ou valida√ß√£o pr√©via adequada
      ‚ùå INCORRETO: N√£o trata exce√ß√µes ou tratamento inadequado

      ### 7. EXECU√á√ÉO CORRETA (Obrigat√≥rio ‚Äî 15 pontos)
      ‚úÖ CORRETO: C√≥digo funciona sem erros
         - Sintaxe correta na linguagem utilizada
         - L√≥gica coerente e execut√°vel
      ‚ùå INCORRETO: Erros de compila√ß√£o/execu√ß√£o

      ## SISTEMA DE PONTUA√á√ÉO (Escala: 0 a 75 pontos)
      
      Some os pontos de cada crit√©rio conforme atribu√≠do acima.

      ## FORMATO OBRIGAT√ìRIO DA RESPOSTA

      Sua an√°lise deve OBRIGATORIAMENTE terminar com este formato exato:

      ==================================================
      üìä CORRE√á√ÉO AUTOM√ÅTICA ‚Äî Q2: XX pontos (m√°x: 75)
      ==================================================

      Onde XX √© a nota de 0 a 75 baseada nos crit√©rios acima.


prompt_templates:
  # Cabe√ßalho usado quando assessment.detailed_feedback √© true
  header_detailed: |
    # AVALIA√á√ÉO AUTOMATIZADA DETALHADA - {assessment_name}
    Data: {current_date}

    ## INSTRU√á√ïES GERAIS
    Voc√™ √© um professor assistente especialista. Analise o c√≥digo do aluno para cada quest√£o COM BASE EM CADA ITEM DA RUBRICA FORNECIDA.
    Forne√ßa um feedback DETALHADO!

    Para cada quest√£o, CONSIDERANDO RIGOROSAMENTE A RUBRICA FORNECIDA:
    1.  Forne√ßa um feedback construtivo e aprofundado.
    2.  Destaque os pontos positivos e onde o aluno acertou.
    3.  Aponte os erros ou √°reas de melhoria de forma clara.
    4.  Ofere√ßa sugest√µes pr√°ticas e exemplos de como o c√≥digo poderia ser melhorado ou corrigido.
    5.  No final da an√°lise de cada quest√£o, forne√ßa a nota formatada.

    PARA CADA ITEM X DA RUBRICA, explique se foi atendido ou n√£o, e por qu√™:
       - ‚úÖ CORRETO: item X atendido
       - ‚ùå INCORRETO: item X n√£o atendido
       - ‚ö†Ô∏è PARCIALMENTE CORRETO: item X atendido parcialmente

    FORMATO DE SA√çDA OBRIGAT√ìRIO DA NOTA DE CADA QUEST√ÉO:
    - QUESTAO_[ID]: [NOTA]/[MAXIMO] - [coment√°rio breve]

  # Cabe√ßalho usado quando assessment.detailed_feedback √© false
  header_concise: |
    # AVALIA√á√ÉO AUTOMATIZADA - {assessment_name}
    Data: {current_date}

    ## INSTRU√á√ïES GERAIS
    Voc√™ √© um professor assistente especialista. Analise o c√≥digo do aluno para cada quest√£o COM BASE EM CADA ITEM DA RUBRICA FORNECIDA.
    Forne√ßa um feedback CONCISO!

    FORMATO DE SA√çDA OBRIGAT√ìRIO DA NOTA DE CADA QUEST√ÉO:
    - QUESTAO_[ID]: [NOTA]/[MAXIMO] - [coment√°rio breve]

  # Template para a se√ß√£o de cada quest√£o no prompt
  question_block: |
    ---
    ## {question_name} ({question_id}) - M√°ximo: {max_points} pontos

    ### RUBRICA DE AVALIA√á√ÉO:
    {rubric}

    ### C√ìDIGO SUBMETIDO PELO ALUNO:
    ```
    {code}
    ```

    Lembre-se de incluir a linha: QUESTAO_{question_id}: [NOTA]/{max_points} - [coment√°rio]


# API Configuration
api:
  provider: "groq"
  url: "https://api.groq.com/openai/v1/chat/completions"
  models:
    - "gemma2-9b-it"
    - "llama-3.1-8b-instant"
    - "llama-3.3-70b-versatile"
    - "meta-llama/llama-4-maverick-17b-128e-instruct"
    - "meta-llama/llama-4-scout-17b-16e-instruct"  
  max_tokens: 4000
  temperature: 0.1
  timeout: 120

# Processing Configuration
processing:
  parallel_threads: 5
  automatic_backup: true

# Email Configuration
email:
  subject: "Feedback e Corre√ß√£o IA - {assessment_name} - {nome_aluno}"
  body: |
    Prezado(a) {nome_aluno},

    A sua nota da avalia√ß√£o "{assessment_name}" da disciplina Programa√ß√£o Orientada a Objetos j√° est√° dispon√≠vel no Moodle.

    Em anexo, envio tamb√©m dois arquivos:
    1. _feedback.txt ‚Äì Corre√ß√£o detalhada gerada automaticamente por Intelig√™ncia Artificial.
    2. _prompt.txt ‚Äì Texto exato enviado √† IA para gerar a corre√ß√£o, que voc√™ pode testar em outras ferramentas, se desejar.

    Ressalto que essa corre√ß√£o pode conter imprecis√µes ou erros. Utilize-a como apoio ao seu processo de aprendizagem na disciplina.

    Atenciosamente,
    Prof. Francisco Zampirolli